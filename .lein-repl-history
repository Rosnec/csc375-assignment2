(use '(incanter core charts))
(defn f [x y] (sin (sqrt (plus (sq x) (sq y)))))
(view (heat-map f -10 10 -15 15))
(view (heat-map f -10 10 -10 10 :color? false))
(defn f2 [x y] (plus (sq x) (sq y)))
(view (heat-map f2 -10 10 -10 10))
(view (heat-map f2 -10 10 -10 10 :color? false))
(use 'incanter.stats)
(defn f3 [x y] (pdf-normal (sqrt (plus (sq x) (sq y)))))
(view (heat-map f3 -3 3 -3 3 :x-label "x1" :y-label "x2" :z-label "pdf"))
(view (heat-map f3 -3 3 -3 3 :color? false))
(defn f4 [x y] (minus (sq x) (sq y)))
(view (heat-map f4 -10 10 -10 10))
(view (heat-map f4 -10 10 -10 10 :color? false))
(use '(incanter core stats charts))
(let [data [[0 5 1 2]
[0 10 1.9 1]
[15 0 0.5 1.5]
[18 10 4.5 2.1]]
diffusion (fn [x y]
(sum (map #(pdf-normal (euclidean-distance [x y] (take 2 %))
:mean (nth % 2) :sd (last %))
data)))]
(view (heat-map diffusion -5 20 -5 20)))
(use '(incanter core charts))
  (defn f [x y] (sin (sqrt (plus (sq x) (sq y)))))
  (view (heat-map f -10 10 -15 15))
  (view (heat-map f -10 10 -10 10 :color? false))
  (view (heat-map f 5 10 5 10 :include-zero? false))
  (defn f2 [x y] (plus (sq x) (sq y)))
  (view (heat-map f2 -10 10 -10 10))
  (view (heat-map f2 -10 10 -10 10 :color? false))
  (use 'incanter.stats)
  (defn f3 [x y] (pdf-normal (sqrt (plus (sq x) (sq y)))))
  (view (heat-map f3 -3 3 -3 3 :x-label "x1" :y-label "x2" :z-label "pdf"))
  (view (heat-map f3 -3 3 -3 3 :color? false))
  (defn f4 [x y] (minus (sq x) (sq y)))
  (view (heat-map f4 -10 10 -10 10))
  (view (heat-map f4 -10 10 -10 10 :color? false))
  (use '(incanter core stats charts))
(use 'rwl.star-flight-3d)
(use '(incanter core stats charts))
(incanter.core/conj-cols [1 2 3] [3 4 5])
(doc incanter.core/conj-cols)
(incanter.core/view (incanter.core/conj-cols {:a 1 :b 2} {:c 1 :d 2}))
(incanter.core/view (incanter.core/conj-cols {:a 1 :b 2} {:a 1 :b 2}))
(incanter.core/conj-cols (range 0 3) (range 1 4) (range 2 5))
(keyword 'a)
(keyword 'rwl)
(keyword +)
(keyword '+)
(let [x 1 y 2] (for [z [x y]] (keyword 'z)))
(let [x 1 y 2] (for [z [x y]] (keyword z)))
(let [x 1 y 2] (for [z [x y]] (keyword x)))
(let [x 1 y 2] (for [z [x y]] (keyword 'x)))
(let [x 1 y 2] (for [z [x y]] (keyword (quote z))))
(unquote 'x)
(unquote '+)
(doc unquote)
(doc unquote-splicing)
(use '(incanter core charts))
(dataset [:a :b :c] (conj-cols [1 2 3] [4 5 6] [7 8 9]))
(dataset [:a :b :c] (for [row (conj-cols [1 2 3] [4 5 6] [7 8 9])] (for [item row] item)))
(doc conj-cols)
(conj-cols {:a [1 2 3]} {:b [2 3 4]})
(dataset)
(dataset [{:a 1 :b 2 :c 3} {:a 5 :b 4 :c 1}])
(view (dataset [{:a 1 :b 2 :c 3} {:a 5 :b 4 :c 1}]))
(view (eval `(dataset ~[{:a 1 :b 2 :c 3} {:a 5 :b 4 :c 1}])))
(view (eval `(dataset ~@[{:a 1 :b 2 :c 3} {:a 5 :b 4 :c 1}])))
(view (apply dataset [{:a 1 :b 2 :c 3} {:a 5 :b 4 :c 1}]))
(to-dataset (concat [{:a 1 :b 2} {:a 5 :b 4}] [{:a 2 :b 10}]))
(doc save)
java.io.File
(doc doseq)
