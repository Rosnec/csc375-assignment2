(use '(incanter core charts))
(defn f [x y] (sin (sqrt (plus (sq x) (sq y)))))
(view (heat-map f -10 10 -15 15))
(view (heat-map f -10 10 -10 10 :color? false))
(defn f2 [x y] (plus (sq x) (sq y)))
(view (heat-map f2 -10 10 -10 10))
(view (heat-map f2 -10 10 -10 10 :color? false))
(use 'incanter.stats)
(defn f3 [x y] (pdf-normal (sqrt (plus (sq x) (sq y)))))
(view (heat-map f3 -3 3 -3 3 :x-label "x1" :y-label "x2" :z-label "pdf"))
(view (heat-map f3 -3 3 -3 3 :color? false))
(defn f4 [x y] (minus (sq x) (sq y)))
(view (heat-map f4 -10 10 -10 10))
(view (heat-map f4 -10 10 -10 10 :color? false))
(use '(incanter core stats charts))
(let [data [[0 5 1 2]
[0 10 1.9 1]
[15 0 0.5 1.5]
[18 10 4.5 2.1]]
diffusion (fn [x y]
(sum (map #(pdf-normal (euclidean-distance [x y] (take 2 %))
:mean (nth % 2) :sd (last %))
data)))]
(view (heat-map diffusion -5 20 -5 20)))
(use '(incanter core charts))
  (defn f [x y] (sin (sqrt (plus (sq x) (sq y)))))
  (view (heat-map f -10 10 -15 15))
  (view (heat-map f -10 10 -10 10 :color? false))
  (view (heat-map f 5 10 5 10 :include-zero? false))
  (defn f2 [x y] (plus (sq x) (sq y)))
  (view (heat-map f2 -10 10 -10 10))
  (view (heat-map f2 -10 10 -10 10 :color? false))
  (use 'incanter.stats)
  (defn f3 [x y] (pdf-normal (sqrt (plus (sq x) (sq y)))))
  (view (heat-map f3 -3 3 -3 3 :x-label "x1" :y-label "x2" :z-label "pdf"))
  (view (heat-map f3 -3 3 -3 3 :color? false))
  (defn f4 [x y] (minus (sq x) (sq y)))
  (view (heat-map f4 -10 10 -10 10))
  (view (heat-map f4 -10 10 -10 10 :color? false))
  (use '(incanter core stats charts))
